{"version":3,"sources":["img/spinner.gif","components/ui/Header.js","components/characters/CharacterItem.js","components/ui/Spinner.js","components/characters/CharacterGrid.js","components/ui/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","CharacterItem","item","src","imageUrl","alt","name","text","Spinner","CharacterGrid","items","isLoading","length","map","undefined","key","multiverseid","Search","typingTimer","getQuery","doneTyping","$","val","keyup","clearTimeout","setTimeout","useState","setText","id","onChange","e","q","target","value","type","placeholder","autoFocus","mtg","require","App","setItems","setIsLoading","query","setQuery","useEffect","a","card","where","result","console","log","fetchItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6LAAAA,EAAOC,QAAU,IAA0B,qC,0bCW5BC,G,cARA,WACX,OACI,4BAAQC,UAAU,aCiBXC,EApBO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,OACI,yBAAKF,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,yBAAKG,IAAKD,EAAKE,SAAUC,IAAI,MAE/B,yBAAKL,UAAU,aACb,4BAAKE,EAAKI,MACV,4BACE,4BACGJ,EAAKK,WCDTC,G,OATC,WACZ,OACI,wBAAIR,UAAU,UAAd,0CCgBOS,EAjBO,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAuB,EAAhBC,UAE5B,OAAyB,IAAjBD,EAAME,QAAgBF,EAAME,QAAU,IAAQ,kBAAC,EAAD,MAClD,6BAASZ,UAAU,SACdU,EAAMG,KAAI,SAAAX,GACP,YAAsBY,IAAlBZ,EAAKE,cACL,EAGA,kBAAC,EAAD,CAAeW,IAAKb,EAAKc,aAAcd,KAAMA,S,iBC8BlDe,EAxCA,SAAC,GAAoB,IAE5BC,EAFWC,EAAgB,EAAhBA,SAcf,SAASC,IACLD,EAASE,IAAE,YAAYC,OAT3BD,IAAE,YAAYE,OAAM,WAChBC,aAAaN,GACTG,IAAE,YAAYC,QACdJ,EAAcO,WAAWL,EANR,SAHM,MAiBPM,mBAAS,IAjBF,mBAiBxBnB,EAjBwB,KAiBlBoB,EAjBkB,KAuB/B,OACI,6BAAS3B,UAAU,UACf,8BACI,2BACA4B,GAAG,UACHC,SAAU,SAACC,GAAD,OATJC,EASoBD,EAAEE,OAAOC,WAR3CN,EAAQI,GADK,IAACA,GAUNG,KAAK,OACLlC,UAAU,eACVmC,YAAY,sBACZC,WAAS,EACTH,MAAO1B,OC7BjB8B,EAAMC,EAAQ,KA6BLC,EA1BH,WAAO,IAAD,EACUb,mBAAS,IADnB,mBACThB,EADS,KACF8B,EADE,OAEkBd,oBAAS,GAF3B,mBAETf,EAFS,KAEE8B,EAFF,OAGUf,mBAAS,IAHnB,mBAGTgB,EAHS,KAGFC,EAHE,KAiBhB,OAXAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACIR,EAAIS,KAAKC,MAAM,CAACzC,KAAMoC,IAD1B,OACXM,EADW,OAEjBC,QAAQC,IAAIF,GACZR,EAASQ,GACTP,GAAa,GAJI,2CAAH,qDAMhBU,KACC,CAACT,IAIJ,yBAAK1C,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQmB,SAAU,SAACY,GAAD,OAAOY,EAASZ,MAClC,kBAAC,EAAD,CAAepB,UAAWA,EAAWD,MAAOA,MCnB5B0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.b1f61fbf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","import React from 'react';\r\n// import logo from '../../img/logo.png';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className='center'>\r\n            {/* <img src={logo} alt='' /> */}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst CharacterItem = ({ item }) => {\r\n    return (\r\n        <div className='card'>\r\n          <div className='card-inner'>\r\n            <div className='card-front'>\r\n              <img src={item.imageUrl} alt='' />\r\n            </div>\r\n            <div className='card-back'>\r\n              <h1>{item.name}</h1>\r\n              <ul>\r\n                <li>\r\n                  {item.text}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default CharacterItem\r\n","import React from 'react'\r\nimport SpinningGif from '../../img/spinner.gif'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <h1 className='center'>\r\n            Enter a card name to generate cards!\r\n            {/* <img src={SpinningGif} style={{ width: '200px', margin: 'auto', display: 'block'}}/> */}\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react';\r\nimport CharacterItem from './CharacterItem';\r\nimport Spinner from '../ui/Spinner';\r\n\r\nconst CharacterGrid = ({ items, isLoading} ) => {\r\n\r\n    return (items.length === 0 || items.length >= 100) ? (<Spinner />) : (\r\n        <section className='cards'>\r\n            {items.map(item => {\r\n                if (item.imageUrl === undefined ) {\r\n                    return;\r\n                } else {\r\n                    return(\r\n                    <CharacterItem key={item.multiverseid} item={item}></CharacterItem>\r\n                    )\r\n                }\r\n            })}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CharacterGrid\r\n","import React, { useState } from 'react'\r\nimport $ from 'jquery';\r\n\r\nconst Search = ( { getQuery } ) => {\r\n\r\n    var typingTimer;                //timer identifier\r\n    var doneTypingInterval = 1000;  //time in ms (5 seconds)\r\n\r\n    //on keyup, start the countdown\r\n    $('#myInput').keyup(function(){\r\n        clearTimeout(typingTimer);\r\n        if ($('#myInput').val()) {\r\n            typingTimer = setTimeout(doneTyping, doneTypingInterval);\r\n        }\r\n    });\r\n\r\n    //user is \"finished typing,\" do something\r\n    function doneTyping () {\r\n        getQuery($('#myInput').val())\r\n    }\r\n    const [text, setText] = useState('');\r\n\r\n    const onChange = (q) => {\r\n        setText(q)\r\n        // getQuery(q)\r\n    }\r\n    return (\r\n        <section className='search'>\r\n            <form>\r\n                <input\r\n                id=\"myInput\"\r\n                onChange={(e) => onChange(e.target.value)}\r\n                type='text'\r\n                className='form-control'\r\n                placeholder='Type in a card name'\r\n                autoFocus\r\n                value={text}\r\n                ></input>  \r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import Axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/ui/Header';\nimport CharacterGrid from './components/characters/CharacterGrid';\nimport Search from './components/ui/Search';\n\nconst mtg = require('mtgsdk');\n\n\nconst App = () => {\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState('');\n\n\n  useEffect(() => { //whenenver useEffect gets run, add return () => {} which will run prior to useEffect running again\n    const fetchItems = async () => {\n      const result = await mtg.card.where({name: query})\n      console.log(result);\n      setItems(result)\n      setIsLoading(false);\n    }\n    fetchItems();\n  }, [query])\n\n\n  return (\n  <div className='container'>\n    <Header />\n    <Search getQuery={(q) => setQuery(q)}/>\n    <CharacterGrid isLoading={isLoading} items={items}/>\n  </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}